
# ================================================================================
# GUI –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –°–ï–†–î–ï–ß–ù–û-–°–û–°–£–î–ò–°–¢–û–ì–û –ó–î–û–†–û–í–¨–Ø
# –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å CatBoost ML
# ================================================================================

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import pandas as pd
import numpy as np
from catboost import CatBoostClassifier
from sklearn.preprocessing import StandardScaler
import threading
import sys
import os

class HeartHealthGUI:
    """–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è"""
    
    def __init__(self, root):
        self.root = root
        self.root.title("ü´Ä –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è")
        self.root.geometry("800x600")
        self.root.configure(bg='#f0f0f0')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        self.predictor = None
        self.setup_gui()
        
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        title_frame.pack(fill='x', padx=10, pady=5)
        
        title_label = tk.Label(
            title_frame, 
            text="ü´Ä –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è",
            font=('Arial', 16, 'bold'),
            fg='white', bg='#2c3e50'
        )
        title_label.pack(pady=20)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—Ä–µ–π–º —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        notebook = ttk.Notebook(self.root)
        notebook.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –í–∫–ª–∞–¥–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
        self.input_frame = ttk.Frame(notebook)
        notebook.add(self.input_frame, text="üìù –î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
        self.create_input_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_frame = ttk.Frame(notebook)
        notebook.add(self.results_frame, text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        self.create_results_tab()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        self.init_model()
    
    def create_input_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params_frame = ttk.LabelFrame(self.input_frame, text="–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", padding=20)
        params_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞
        self.entries = {}
        
        fields = [
            ('age', '–í–æ–∑—Ä–∞—Å—Ç (–ª–µ—Ç)', '55'),
            ('systolic_bp', '–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î (–º–º —Ä—Ç.—Å—Ç.)', '130'),
            ('diastolic_bp', '–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ –ê–î (–º–º —Ä—Ç.—Å—Ç.)', '80'),
            ('heart_rate', '–ß–°–° (—É–¥/–º–∏–Ω)', '75'),
            ('cholesterol', '–•–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω (–º–≥/–¥–ª)', '200'),
            ('bmi', '–ò–ú–¢ (–∫–≥/–º¬≤)', '25'),
            ('glucose', '–ì–ª—é–∫–æ–∑–∞ (–º–≥/–¥–ª)', '100'),
            ('stress_level', '–£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ (0-10)', '5'),
            ('exercise_hours', '–§–∏–∑. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—á/–Ω–µ–¥–µ–ª—é)', '3')
        ]
        
        for i, (key, label, default) in enumerate(fields):
            row = i // 3
            col = i % 3
            
            tk.Label(params_frame, text=label, font=('Arial', 10)).grid(
                row=row*2, column=col, sticky='w', padx=10, pady=5
            )
            
            entry = tk.Entry(params_frame, font=('Arial', 10), width=15)
            entry.insert(0, default)
            entry.grid(row=row*2+1, column=col, padx=10, pady=5)
            self.entries[key] = entry
        
        # –ß–µ–∫–±–æ–∫—Å—ã
        checkbox_frame = ttk.LabelFrame(self.input_frame, text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã", padding=20)
        checkbox_frame.pack(fill='x', padx=20, pady=10)
        
        self.smoking_var = tk.BooleanVar()
        self.family_history_var = tk.BooleanVar()
        self.gender_var = tk.BooleanVar()
        
        tk.Checkbutton(checkbox_frame, text="–ö—É—Ä–µ–Ω–∏–µ", variable=self.smoking_var).pack(side='left', padx=20)
        tk.Checkbutton(checkbox_frame, text="–°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", variable=self.family_history_var).pack(side='left', padx=20)
        tk.Checkbutton(checkbox_frame, text="–ú—É–∂—Å–∫–æ–π –ø–æ–ª", variable=self.gender_var).pack(side='left', padx=20)
        
        # –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        analyze_btn = tk.Button(
            self.input_frame,
            text="üî¨ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑",
            font=('Arial', 12, 'bold'),
            bg='#3498db', fg='white',
            command=self.analyze_patient
        )
        analyze_btn.pack(pady=20)
    
    def create_results_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_text = scrolledtext.ScrolledText(
            self.results_frame,
            font=('Consolas', 10),
            wrap=tk.WORD,
            width=80,
            height=30
        )
        self.results_text.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.results_frame)
        buttons_frame.pack(fill='x', padx=20, pady=10)
        
        clear_btn = tk.Button(
            buttons_frame,
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å",
            command=lambda: self.results_text.delete(1.0, tk.END)
        )
        clear_btn.pack(side='left', padx=10)
        
        save_btn = tk.Button(
            buttons_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç",
            command=self.save_report
        )
        save_btn.pack(side='left', padx=10)
    
    def init_model(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            from cardiovascular_catboost_system import HeartHealthPredictor
            self.predictor = HeartHealthPredictor()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
            training_data = self.predictor.create_patient_dataset(500)  # –ú–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã
            self.predictor.train_disease_prediction_models(training_data)
            
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
    
    def get_patient_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–∑ —Ñ–æ—Ä–º—ã"""
        try:
            patient_data = {}
            
            # –ß–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è
            for key, entry in self.entries.items():
                patient_data[key] = float(entry.get())
            
            # –ë—É–ª–µ–≤—ã –ø–æ–ª—è
            patient_data['smoking'] = int(self.smoking_var.get())
            patient_data['family_history'] = int(self.family_history_var.get())
            patient_data['gender'] = int(self.gender_var.get())
            
            return patient_data
            
        except ValueError as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return None
    
    def analyze_patient(self):
        """–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞"""
        if not self.predictor:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return
        
        patient_data = self.get_patient_data()
        if not patient_data:
            return
        
        try:
            # –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            analysis = self.predictor.comprehensive_health_analysis(patient_data)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
            from cardiovascular_catboost_system import MedicalReportGenerator
            report_gen = MedicalReportGenerator()
            report = report_gen.create_patient_report(analysis, patient_data)
            recommendations = report_gen.generate_medical_recommendations(analysis)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_text.delete(1.0, tk.END)
            self.results_text.insert(tk.END, report)
            self.results_text.insert(tk.END, "\n\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n")
            self.results_text.insert(tk.END, "="*50 + "\n")
            
            for i, rec in enumerate(recommendations, 1):
                self.results_text.insert(tk.END, f"{i}. {rec}\n")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            notebook = self.root.children['!notebook']
            notebook.select(1)
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
    
    def save_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª"""
        try:
            from tkinter import filedialog
            filename = filedialog.asksaveasfilename(
                defaultextension=".txt",
                filetypes=[("–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã", "*.txt"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(self.results_text.get(1.0, tk.END))
                messagebox.showinfo("–£—Å–ø–µ—Ö", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

def main():
    """–ó–∞–ø—É—Å–∫ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    root = tk.Tk()
    app = HeartHealthGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
